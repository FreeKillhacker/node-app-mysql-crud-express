#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('registroUsuarios:server');
var debug = require('debug')('crud-mysql:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Crear HTTP server.
 */

var server = http.createServer(app);

var localhost = "127.0.0.1";
var localRemote = "172.16.0.3";


/**
 * El (Listen) en el puerto provisto, 
 * en todas las interfaces de red.
 */
server.listen(port, localhost);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalice un puerto en un número, cadena o falso.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Detector de eventos para el evento "error" del servidor HTTP.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // manejar errores de escucha específicos con mensajes amigables
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Detector de eventos para el evento de "escucha" del servidor HTTP.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
